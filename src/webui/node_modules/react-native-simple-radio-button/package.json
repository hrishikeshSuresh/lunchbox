{
  "_args": [
    [
      {
        "raw": "react-native-simple-radio-button",
        "scope": null,
        "escapedName": "react-native-simple-radio-button",
        "name": "react-native-simple-radio-button",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/satya/Desktop/SE/final/src/webui"
    ]
  ],
  "_from": "react-native-simple-radio-button",
  "_hasShrinkwrap": false,
  "_id": "react-native-simple-radio-button@2.7.4",
  "_location": "/react-native-simple-radio-button",
  "_nodeVersion": "8.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-simple-radio-button_2.7.4_1570770766223_0.6350598131555321"
  },
  "_npmUser": {
    "name": "moschan",
    "email": "kaityo02@gmail.com"
  },
  "_npmVersion": "6.11.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-simple-radio-button",
    "scope": null,
    "escapedName": "react-native-simple-radio-button",
    "name": "react-native-simple-radio-button",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-simple-radio-button/-/react-native-simple-radio-button-2.7.4.tgz",
  "_shasum": "86e2dbe8af9e6bf60eee088f60466f7a975e7758",
  "_shrinkwrap": null,
  "_spec": "react-native-simple-radio-button",
  "_where": "/home/satya/Desktop/SE/final/src/webui",
  "author": {
    "name": "moschan",
    "email": "kota.frswï¼ gmail.com",
    "url": "http://moschan.com/blog/"
  },
  "bugs": {
    "url": "https://github.com/moschan/react-native-simple-radio-button/issues"
  },
  "dependencies": {},
  "description": "simple and useful animated radio button component for React Native",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-QOZNmJUn0ViBGU+at7wAG/uGzd5PfXi0kMHr9lfTCLXknW/f9f2fOVjxjdHvOCdf/zA/eMJBjGjtusSDzQf1+w==",
    "shasum": "86e2dbe8af9e6bf60eee088f60466f7a975e7758",
    "tarball": "https://registry.npmjs.org/react-native-simple-radio-button/-/react-native-simple-radio-button-2.7.4.tgz",
    "fileCount": 7,
    "unpackedSize": 19352,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdoA9OCRA9TVsSAnZWagAA7RQQAKPaUGPG4hNnxMdLlPT1\n3bWrQWIuucSpKPG9l3tkqLsxwkuxoT5/CZDs7fKXJYhBiehODAtzmUId/PmL\nsXlQjVRoCsP0L3P5gKYRvSl23X0mYOoS7ragewMbM+QlPiwjbgmjkim1lWkl\nCn5wUz5bepo7JndF1OCKC3xF7zXSJqTdBlbcuAlSUNY/agxLjB54Y2vgTRyU\n2PxWehk2eceRmNjbm+Z3soGye34RdIuW0WiwDkVRHpW3wlrtatVo+8HoJlwh\nh5RAbPSBUO2LNaG3ea22vxC4ZP8KqEFL4mOxkaRBonB43wS8798yY+RTRtp4\nh4n/KGQkGiOUDRABIMf4acx3jqIjK6qiWhA3ZGWzmiu2SkGozv7MRZRPEACQ\nvZSdWEfc79+P8gMaIuld8ZEQROAxdI1gd/2Zn8a+6DxWrQSTrV08X5E63C7E\nEPIQKaIhTEo+tp0AFnuX6qbuZGhum9aNsKfbJeo5MM2J0s3ynPo8iDg8D0cR\nyV5r4kokHK2PbcONqUgzpCKaF6kltHCLWIQndONSfnF6PEa2jiItRw0r2bLW\nhLwVCUp4qm0XmsPL9LrWDK/r+dITpL52Wg5C4BL0D3h5kqoW5ZwRiuy3qo7g\nn5ndZm48UPZpgmWYKItKCEjDVJ8zNUDT02RtwE5HizkIRTgkUuIVwnQPTvnZ\niJl0\r\n=7gKw\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "f659b438b7c2d259aeb07209050e3c7894d6f880",
  "homepage": "https://github.com/moschan/react-native-simple-radio-button#readme",
  "keywords": [
    "react-component",
    "react-native",
    "ios",
    "android",
    "form",
    "button",
    "radio-button"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "moschan",
      "email": "kaityo02@gmail.com"
    }
  ],
  "name": "react-native-simple-radio-button",
  "optionalDependencies": {},
  "readme": "# react-native-simple-radio-button\n> simple and useful radio button component for React Native\n\n[![npm](https://img.shields.io/npm/v/react-native-simple-radio-button.svg)]()[![npm](https://img.shields.io/npm/l/react-native-simple-radio-button.svg)]()\n\n[![NPM](https://nodei.co/npm/react-native-simple-radio-button.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/react-native-simple-radio-button/)\n\n\nDemo\n---\n\n![Demo](./doc/ver1.3_demo.gif)\n\n\n## Installation\n\nin Cli\n\n```sh\nnpm i react-native-simple-radio-button --save\n```\n\n\n# Getting started\n\n```js\nimport RadioForm, {RadioButton, RadioButtonInput, RadioButtonLabel} from 'react-native-simple-radio-button';\n\n\nvar radio_props = [\n  {label: 'param1', value: 0 },\n  {label: 'param2', value: 1 }\n];\n\nvar RadioButtonProject = React.createClass({\n  getInitialState: function() {\n    return {\n      value: 0,\n    }\n  },\n  render: function() {\n    return (\n      <View>\n        <RadioForm\n          radio_props={radio_props}\n          initial={0}\n          onPress={(value) => {this.setState({value:value})}}\n        />\n      </View>\n    );\n  }\n});\n```\n\nBasic\n---\n\n```js\n<RadioForm\n  radio_props={radio_props}\n  initial={0}\n  onPress={(value) => {this.setState({value:value})}}\n/>\n```\n\nAdvanced\n---\n\n```js\n<RadioForm\n  radio_props={this.state.types}\n  initial={0}\n  formHorizontal={false}\n  labelHorizontal={true}\n  buttonColor={'#2196f3'}\n  animation={true}\n  onPress={(value) => {this.setState({value:value})}}\n/>\n```\n\nPro\n---\n\n```js\n<RadioForm\n  formHorizontal={true}\n  animation={true}\n>\n  {/* To create radio buttons, loop through your array of options */}\n  {\n    radio_props.map((obj, i) => (\n      <RadioButton labelHorizontal={true} key={i} >\n        {/*  You can set RadioButtonLabel before RadioButtonInput */}\n        <RadioButtonInput\n          obj={obj}\n          index={i}\n          isSelected={this.state.value3Index === i}\n          onPress={onPress}\n          borderWidth={1}\n          buttonInnerColor={'#e74c3c'}\n          buttonOuterColor={this.state.value3Index === i ? '#2196f3' : '#000'}\n          buttonSize={40}\n          buttonOuterSize={80}\n          buttonStyle={{}}\n          buttonWrapStyle={{marginLeft: 10}}\n        />\n        <RadioButtonLabel\n          obj={obj}\n          index={i}\n          labelHorizontal={true}\n          onPress={onPress}\n          labelStyle={{fontSize: 20, color: '#2ecc71'}}\n          labelWrapStyle={{}}\n        />\n      </RadioButton>\n    ))\n  }  \n</RadioForm>\n```\n\n# Methods\n\n## updateIsActiveIndex\nUpdating active radio button forcibly\n\n# Props\n\n## RadioForm Component\n### radio_props (Default: `[]`) _*required_\nradio button value and label array\n\n### onPress _*required_\ncallback when radio button clicked.\n\n### initial (Default: `0`)\nThe index of selected radio button. This is used when this component is activated. If you want to\npass initial as asynchronous, you can use updateIsActiveIndex function.\n> If you want to make it empty initially, please pass `-1`\n\n### buttonColor(Default: '#2196f3')\nchange radio button color\n\n```js\n<RadioForm\n  radio_props={radio_props}\n  initial={0}\n  buttonColor={'#50C900'}\n/>\n```\n\n![Demo](./doc/button_color.jpg)\n\n### labelColor(Default: '#000')\nchange label color\n\n```js\n<RadioForm\n  radio_props={radio_props}\n  initial={0}\n  labelColor={'#50C900'}\n/>\n```\n\n\n### formHorizontal(Default: false)\nchange form position\n\n```js\n<RadioForm\n  radio_props={radio_props}\n  initial={0}\n  formHorizontal={true}\n/>\n```\n\n![Demo](./doc/form_horizontal.jpg)\n\n\n### labelHorizontal(Default: true)\nchange label position\n\n```js\n<RadioForm\n  radio_props={radio_props}\n  initial={0}\n  labelHorizontal={false}\n/>\n```\n\n![Demo](./doc/label_horizontal.jpg)\n\n### animation (Default: `true`)\nif you pass false, animation of radio button is disabled\n\n![Demo](./doc/demo_1.gif)\n\n### accessible\nindicates accessibility for the individual radio button input and radio button label components\n\n### accessibilityLabel\nused to set accessibilityLabel for individual radio button input and radio button label components,\nradio button input will have accessibilityLabel = [accessibilityLabel]Input[index]\nradio button label will have accessibilityLabel = [accessibilityLabel]Label[index]\n\n### testID\nused to set testID for individual radio button input and radio button label components,\nradio button input will have testID = [testID]Input[index]\nradio button label will have testID = [testID]Label[index]\n\n## RadioButton Component\n### isSelected\nIf you pass `true` to this param, that button change to selected status.\n\n### labelHorizontal\nchange label position to horizontal\n\n### buttonColor\nThe button color\n\n### selectedButtonColor\nThe selected button color\n\n### labelColor\nThe label color\n\n### style\nThe label style\n\n### wrapStyle\nStyles that are applied to the <View> wrapping the RadioButton component.\n\n## onPress _*required_\ncallback when radio button clicked.\n\n### idSeparator (Default: `|`)\nseparator used for extracting id from accessibilityLabel and testID\n\n### accessible\nindicates accessibility for the wrapped radio button input and radio button label components\n\n### accessibilityLabel\nused to set accessibilityLabel for the wrapped radio button input and radio button label components, needs to be of the format [accessibilityLabel][separator][id]\nradio button input will have accessibilityLabel = [accessibilityLabel]Input[index]\nradio button label will have accessibilityLabel = [accessibilityLabel]Label[index]\n\n### testID\nused to set testID for individual radio button input and radio button label components, needs to be of the format [testID][separator][id]\nradio button input will have testID = [testID]Input[index]\nradio button label will have testID = [testID]Label[index]\n\n```js\n<RadioButton\n  accessible={true}\n  idSeparator=','\n  accessibilityLabel='noteType,1'\n  testID='noteType,1'\n/>\n```\n\n# RadioButtonInput\n### isSelected\n### onPress\n### buttonInnerColor\nThe button inner color\n\n### buttonOuterColor\nThe button inner color\n\n### buttonSize\nThe button size. Width and height will be same length.\n\n### buttonOuterSize\nThe button size of outer. Width and height will be same length.\n\n### buttonStyle\nCustom button style\n\n### buttonWrapStyle\nCustom style for view of button's outside\n\n### accessible\nindicates accessibility for the radio button input component\n\n### accessibilityLabel\nused to set accessibilityLabel (content description / label for Android) for the radio button input component\n\n### testID\nused to set testID (id / name for iOS) for the radio button input component\n\n# RadioButtonLabel\n### labelHorizontal\nIf you pass true, the button and label will be aligned horizontally.\n\n### labelStyle\nIf you pass style, you can change label text style as you want\n\n### labelWrapStyle\nIf you pass style, you can change label wrapper view style as you want\n\n### onPress _*required_\ncallback when radio button clicked.\n\n### accessible\nindicates accessibility for the radio button label component\n\n### accessibilityLabel\nused to set accessibilityLabel (content description / label for Android) for the radio button label component\n\n### testID\nused to set testID (id / name for iOS) for the radio button label component\n\n\n# Contributing\nOf course! Welcome :)\n\nYou can use following command in `example` dir:\n\n```\nnpm run sync\n```\n\nDuring running this command, when you change source to implement/fix something, these changes will sync to `example/node_modules/react-native-simple-radio-button/`. You can check your change using example project easily.\n\n\n# License\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/moschan/react-native-simple-radio-button.git"
  },
  "scripts": {
    "test": "npm test"
  },
  "version": "2.7.4"
}
